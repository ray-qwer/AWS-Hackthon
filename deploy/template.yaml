AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: AI Idol Interaction System

Parameters:
  ProjectName:
    Type: String
    Default: aws-hackthon-gamania
    Description: Project name for resource naming

  # LINE Bot Configuration when setting stack
  ChannelAccessToken:
    Type: String
    Description: LINE Bot Channel Access Token
    NoEcho: true

  ChannelSecret:
    Type: String
    Description: LINE Bot Channel Secret
    NoEcho: true

  UserSuffix:
    Type: String
    Description: For avoiding S3 bucket name conflicts

  CodeBucket:
    Type: String
    Description: S3 bucket containing the Lambda function code

  CodeKey:
    Type: String
    Description: S3 key of the Lambda function code

  PublicVoiceApiKey:
    Type: String
    Description: Public Voice API Key
    NoEcho: true

Resources:
  ####################
  ###  S3 Buckets  ###
  ####################

  # S3 Bucket for Assets
  AssetsBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Delete
    Properties:
      BucketName: !Sub ${ProjectName}-static-assets-${AWS::AccountId}-${UserSuffix}-${AWS::Region}
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders:
              - "*"
            AllowedMethods:
              - GET
              - PUT
              - POST
              - DELETE
              - HEAD
            AllowedOrigins:
              - "*"
            MaxAge: 3600
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false

  # S3 Bucket for Generated Images and Audio
  GeneratedImagesBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Delete
    Properties:
      BucketName: !Sub ${ProjectName}-generated-images-${AWS::AccountId}-${UserSuffix}-${AWS::Region}
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders:
              - "*"
            AllowedMethods:
              - GET
              - PUT
              - POST
              - DELETE
              - HEAD
            AllowedOrigins:
              - "*"
            MaxAge: 3600
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false
      VersioningConfiguration:
        Status: Enabled

  GeneratedImagesBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref GeneratedImagesBucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: PublicReadGetObject
            Effect: Allow
            Principal: "*"
            Action:
              - s3:GetObject
            Resource: !Sub arn:aws:s3:::${GeneratedImagesBucket}/*

  # S3 Bucket for Reel Videos
  ReelS3Bucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Delete
    Properties:
      BucketName: !Sub ${ProjectName}-reel-videos-${AWS::AccountId}-${UserSuffix}-${AWS::Region}
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders:
              - "*"
            AllowedMethods:
              - GET
              - PUT
              - POST
              - DELETE
              - HEAD
            AllowedOrigins:
              - "*"
            MaxAge: 3600
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false
      VersioningConfiguration:
        Status: Enabled

  ReelS3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref ReelS3Bucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: PublicReadGetObject
            Effect: Allow
            Principal: "*"
            Action:
              - s3:GetObject
            Resource: !Sub arn:aws:s3:::${ReelS3Bucket}/*

  ##################
  ###  DynamoDB  ###
  ##################

  # DynamoDB Table
  MessagesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub ${AWS::StackName}-messages
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: user_id
          AttributeType: S
        - AttributeName: timestamp
          AttributeType: S
      KeySchema:
        - AttributeName: user_id
          KeyType: HASH
        - AttributeName: timestamp
          KeyType: RANGE

  #############################
  ###  IAM Role for Lambda  ###
  #############################

  # IAM Role for Lambda functions
  LambdaIAMRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${ProjectName}-lambda-role
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: !Sub ${ProjectName}-lambda-policy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                  - dynamodb:DeleteItem
                  - dynamodb:Query
                Resource: !GetAtt MessagesTable.Arn
              - Effect: Allow
                Action:
                  - bedrock:*
                Resource: "*"
              - Effect: Allow
                Action:
                  - ecr:GetDownloadUrlForLayer
                  - ecr:BatchGetImage
                  - ecr:GetAuthorizationToken
                Resource: "*"
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:PutObjectAcl
                  - s3:PutObjectVersionAcl
                  - s3:GetObjectVersion
                  - s3:ListBucketVersions
                  - s3:ListBucket
                  - s3:DeleteObject
                  - s3:DeleteObjectVersion
                Resource:
                  - !GetAtt GeneratedImagesBucket.Arn
                  - !Sub ${GeneratedImagesBucket.Arn}/*
                  - !GetAtt AssetsBucket.Arn
                  - !Sub ${AssetsBucket.Arn}/*
                  - !GetAtt ReelS3Bucket.Arn
                  - !Sub ${ReelS3Bucket.Arn}/*
                  - !Sub arn:aws:s3:::${CodeBucket}
                  - !Sub arn:aws:s3:::${CodeBucket}/*
              - Effect: Allow
                Action:
                  - sqs:SendMessage
                  - sqs:ReceiveMessage
                  - sqs:DeleteMessage
                  - sqs:GetQueueAttributes
                Resource: 
                  - !GetAtt MessageQueue.Arn
                  - !GetAtt LineQueue.Arn
                  - !GetAtt ClassifierQueue.Arn
                  - !GetAtt ProcessorQueue.Arn

  #####################
  ###  API Gateway  ###
  #####################

  # API Gateway REST API
  ApiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub ${ProjectName}-api
      Description: API for AWS-HACKTHON, ??? LineBot

  # API Gateway method
  RootMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !GetAtt ApiGateway.RootResourceId
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${WebhookHandler.Arn}/invocations

  # API Gateway deployment
  ApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn: RootMethod
    Properties:
      RestApiId: !Ref ApiGateway

  # API Gateway stage
  ApiStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      RestApiId: !Ref ApiGateway
      DeploymentId: !Ref ApiDeployment
      StageName: prod

  # Lambda permission for API Gateway
  WebhookHandlerPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref WebhookHandler
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/POST/

  MessageQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub ${ProjectName}-message-queue
      VisibilityTimeout: 610
      MessageRetentionPeriod: 345600  # 4 days

  # SQS Queues
  LineQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub ${AWS::StackName}-line-queue
      VisibilityTimeout: 610
      MessageRetentionPeriod: 86400

  ClassifierQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub ${AWS::StackName}-classifier-queue
      VisibilityTimeout: 610
      MessageRetentionPeriod: 86400

  ProcessorQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub ${AWS::StackName}-processor-queue
      VisibilityTimeout: 610
      MessageRetentionPeriod: 86400

  ################
  ###  Lambda  ###
  ################

  # Lambda function for LINE Bot webhook
  WebhookHandler:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${ProjectName}-webhook-handler
      CodeUri:
        Bucket: aws-hackthon-lambda-code
        Key: lambda1.zip
      Handler: app.lambda1_line.lambda_handler
      Runtime: python3.11
      Timeout: 60
      MemorySize: 256
      Environment:
        Variables:
          CHANNEL_ACCESS_TOKEN: !Ref ChannelAccessToken
          CHANNEL_SECRET: !Ref ChannelSecret
          TABLE_NAME: !Ref MessagesTable
          CLASSIFIER_QUEUE_URL: !Ref ClassifierQueue
          PROCESSOR_QUEUE_URL: !Ref ProcessorQueue
          PUBLIC_VOICE_API_KEY: !Ref PublicVoiceApiKey
          GENERATED_IMAGES_BUCKET_NAME: !Ref GeneratedImagesBucket
          REEL_S3_BUCKET_NAME: !Ref ReelS3Bucket
          LOG_LEVEL: INFO
          DEBUG: false
      Role: !GetAtt LambdaIAMRole.Arn
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /callback
            Method: post

  # Lambda function for message classification
  MessageClassifier:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${ProjectName}-message-classifier
      CodeUri:
        Bucket: aws-hackthon-lambda-code
        Key: lambda1.zip
      Handler: app.lambda1_classifier.lambda_handler
      Runtime: python3.11
      Timeout: 300
      MemorySize: 256
      Environment:
        Variables:
          TABLE_NAME: !Ref MessagesTable
          PROCESSOR_QUEUE_URL: !Ref ProcessorQueue
          PUBLIC_VOICE_API_KEY: !Ref PublicVoiceApiKey
          GENERATED_IMAGES_BUCKET_NAME: !Ref GeneratedImagesBucket
          REEL_S3_BUCKET_NAME: !Ref ReelS3Bucket
      Role: !GetAtt LambdaIAMRole.Arn

  # Lambda function for message processing
  MessageProcessor:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${ProjectName}-message-processor
      CodeUri:
        Bucket: aws-hackthon-lambda-code
        Key: lambda2.zip
      Handler: app.lambda2.lambda_handler
      Runtime: python3.11
      Timeout: 600
      MemorySize: 3008
      Environment:
        Variables:
          TABLE_NAME: !Ref MessagesTable
          PUBLIC_VOICE_API_KEY: !Ref PublicVoiceApiKey
          GENERATED_IMAGES_BUCKET_NAME: !Ref GeneratedImagesBucket
          REEL_S3_BUCKET_NAME: !Ref ReelS3Bucket
      Role: !GetAtt LambdaIAMRole.Arn

  # Event Source Mapping for Lambda2
  MessageProcessorEventSourceMapping:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      BatchSize: 1
      Enabled: true
      EventSourceArn: !GetAtt MessageQueue.Arn
      FunctionName: !Ref MessageProcessor

Outputs:
  ApiEndpoint:
    Description: API Gateway endpoint URL
    Value: !Sub https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/prod

  DynamoDBTableName:
    Description: Name of the DynamoDB table
    Value: !Ref MessagesTable

  WebhookHandlerName:
    Description: Name of the webhook handler Lambda function
    Value: !Ref WebhookHandler

  MessageProcessorName:
    Description: Name of the message processor Lambda function
    Value: !Ref MessageProcessor

  QueueUrl:
    Description: SQS Queue URL
    Value: !Ref MessageQueue

  LineQueueUrl:
    Description: SQS Queue URL for LINE messages
    Value: !Ref LineQueue

  ClassifierQueueUrl:
    Description: SQS Queue URL for classified messages
    Value: !Ref ClassifierQueue

  ProcessorQueueUrl:
    Description: SQS Queue URL for processed messages
    Value: !Ref ProcessorQueue

  ReelS3BucketName:
    Description: Name of the Reel S3 bucket
    Value: !Ref ReelS3Bucket

  ReelS3BucketArn:
    Description: ARN of the Reel S3 bucket
    Value: !GetAtt ReelS3Bucket.Arn

  WebhookUrl:
    Description: "LINE Bot Webhook URL"
    Value: !Sub "https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/Prod/callback"
